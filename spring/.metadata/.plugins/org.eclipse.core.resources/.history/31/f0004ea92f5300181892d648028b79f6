package Test;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;

public class ProxyFactory {
	
	Object targetObject;
	Pre p = new PreImpro();
	Aff a = new AffDoSth();
	
	public Object createProxy() {
		
		ClassLoader loader = this.getClass().getClassLoader();
		Class[] interfaces = targetObject.getClass().getInterfaces();
		InvocationHandler h =  new MyInvocationHandler(targetObject);
		UserDao userDao = (UserDao)Proxy.newProxyInstance(loader, interfaces, h);
		
		return userDao;
	}
}

class MyInvocationHandler implements InvocationHandler {
	
	Object targetObject;
	public MyInvocationHandler() {}
	public MyInvocationHandler(Object targetObject) {
		this.targetObject = targetObject;
	}
	@Override
	public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
		
		return null;
	}
}
